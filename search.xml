<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo操作]]></title>
    <url>%2F2018%2F07%2F23%2Fhexo%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[初始化1hexo init 进入到文章所在的目录，执行此命令初始化，新建一个网站。 新增文章1hexo new title 进入到要新增文章的目录，执行此命令新增文章。title是文章标题。 生成静态文件1hexo generate or1hexo g 文章写完或要看效果时，执行此命令生成静态文件。 部署1hexo d 文件生成后部署到网站上，此命令执行后就可以在网站上看到相关内容 动态查看1hexo s 启动服务器，可以动态查看文章改动情况，而不必部署到网上。 12hexo ghexo d 部署到网站，并可以查看 12hexo ghexo s 可以在本地查看效果]]></content>
      <categories>
        <category>hexo操作</category>
      </categories>
      <tags>
        <tag>something</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Blockchain]]></title>
    <url>%2F2018%2F03%2F12%2FBlockchain%2F</url>
    <content type="text"><![CDATA[2018-03-12学习以太坊白皮书 Q1&nbsp;&nbsp;&nbsp;&nbsp;问题：A和B交易。首先A给B转100BTC，由矿工添加到区块1000后，形成区块1001.但是B又将此100BTC转给了C，并在1000区块的时候形成分叉（假若B有51%算力），形成1001’区块。且B有能力将1001’区块所在的链变为正常链。那么在这条链上A是否还拥有这100BTC？如果形成分叉币，是否凭空多出了100BTC？ &nbsp;&nbsp;&nbsp;&nbsp;思考：在B形成的链上，A并没有拥有这100BTC。如果形成分叉币，那么在两条链上的交易都是合法的，都会被矿工记录并存储在区块中，所以确实多出了100BTC。（回答只是个人思考，不具准确性） Q2&nbsp;&nbsp;&nbsp;&nbsp;问题：区块链的数据结构是怎样的（Bitcoin的）？ &nbsp;&nbsp;&nbsp;&nbsp;答案：&nbsp;&nbsp;&nbsp;&nbsp;一个区块包含了该区块生产期间的所有交易，存储的结构是Merkle树。Merkle树是一种Hash二叉树，用作快速归纳和校验大规模数据完整性的数据结构。区块链结构： 区块头封装了当前版本号、前一区块哈希值、当前区块PoW要求的随机数、时间戳、以及Merkle根信息 区块体则包括当前区块经过验证的、区块创建过程中生成的所有交易记录。这些记录通过Merkle树的哈希过程生成唯一的Merkle根并记入区块头。 值得注意的是：区块哈希值实际上并不包含在区块的数据结构里，其实区块打包时只有区块头被用于计算哈希（从网络被接收时由每个节点计算出来），常说的区块哈希值实际是区块头哈希值,它可以用来唯一、明确地标识一个区块。 Q3&nbsp;&nbsp;&nbsp;&nbsp;问题：Bitcoin的SPV(简化付款验证)是如何工作的? &nbsp;&nbsp;&nbsp;&nbsp;思考： 什么是SPV。SPV（simplified Payment Verification）是一种用户端的代替解决方案，用这种方案可以实现轻量级的钱包客户端，可以不必下载整个区块而只需下载每个区块的区块头就可以实现交易的证明。 为什么要有SPV。随着Bitcoin区块链高度的增长，其整个区块的数据大约有几百个G（块高度513303），对于普通用户来说，存储这些数据既不必须也没有必要（如果不作为节点的话）。但是用户仍然需要区块的信息来进行支付验证。于是简易支付验证就被设计出来。 SPV的作用。SPV利用Merkle树的特点，只保存区块头的信息。通过Merkle树根节点向全节点发起请求，全节点再通过Merkle根节点遍历该区块的所有交易，一旦确定了交易的存在，SPV客户端就可以完成交易。 注意。全节点和SPV客户端是不同的。全节点是存储有区块链所有信息的节点，相当于一个服务器。SPV在进行交易的时候是要在全节点进行验证后才能进行的。全节点数量相对于用户数量来说并不多。 Q4&nbsp;&nbsp;&nbsp;&nbsp;问题：以太坊采用GAS的优缺点，同时在Bitcoin中有什么措施 &nbsp;&nbsp;&nbsp;&nbsp;思考： Q5&nbsp;&nbsp;&nbsp;&nbsp;问题：区块链的hash与区块链头中的Merkle数根节点是否有关。如果有关，那么挖矿是在收到所有交易之后才进行的吗？否则交易的变更会导致Merkle根节点的hash变化，从而导致区块链hash不符合要求而废弃。]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[未来一些规划]]></title>
    <url>%2F2018%2F01%2F29%2F%E6%9C%AA%E6%9D%A5%E4%B8%80%E4%BA%9B%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[学习方面 算法、加密 计算机语言：Java、Python、C++ 区块链技术，以及编程实现 爬虫 nodejs或Python实现 Linux学习 脚本 JavaScript 个人网站 GitHub静态网页 抄币赚他个百倍（笑） 生活方面 想学吉他 想学绘画 想去骑行 想要出国旅行]]></content>
      <categories>
        <category>future</category>
      </categories>
      <tags>
        <tag>future</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next安装和设置问题]]></title>
    <url>%2F2018%2F01%2F24%2Fnext%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[github Page环境搭建待添加 next 一些设置和修改方法设置首页不显示文章全文描述：在next主题上，默认是在首页显示全部文章和文章的全部内容。但是对于篇幅过长的文章，会造成读者阅读障碍。希望达到在首页只显示文章预览，点击查看详情。 方法： 进入hexo项目的themes/next,打开_config.yml文件，可以用 Notepad++或sublime打开。 找到_config.yml文件中的auto_excerpt，如下显示: 123auto_excerpt: enable: false length: 150 将enable设置为TRUE,然后在Git里执行 123hexo cleanhexo ghexo d 还有另一种方式，是markdown语法里面的，也是被提倡的用法 1&lt;!--more--&gt; 后面的就是被省略的内容，就可以看到预期效果。如下图 设置favicon描述：打开标签页，标签上就会显示title，现在要在title前加上自己的小图标。如下图位置： 方法： 进入hexo项目的themes/next,打开_config.yml文件，找到favicon,可以看到如下设置。 12# Put your favicon.ico into `hexo-site/source/` directory.favicon: /favicon.ico 按照设置，我们只需要选择一张.ico格式的图片，将其命名为 favicon.ico ,再将图片放置到 “blog目录/source/“ 下 然后123hexo cleanhexo ghexo d 提交以后可能马上不会显示效果，多刷新几次，效果就会出来的。 设置背景动态图next主题已经内置了背景动态图，进入hexo项目的themes/next,打开_config.yml文件,查找 canvas ，选择要改的样式，将 false 改为 true 就可以了。例如我的背景就是 canvas_nest ，效果如下图： 设置评论（gitment）评论我使用了gitment，这个配置在其他blog已经有很多教案了，在此不做重复。只是提出在配置过程中自己遇到的问题。 comment按钮显示地方不对 comment提示Error:Not Found 设置搜索配置algolia一直搞不定，一直提示 123$ hexo algoliaERROR [Algolia] Please set an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to enable content indexing.ERROR &gt;&gt; Read https://npmjs.com/hexo-algolia#api-key for more informations. 于是就打算换一个搜索，用 Local Search 来试一试。很简单 安装hexo-generator-searchdb在blog根目录下执行命令 1$ npm install hexo-generator-searchdb --save 在主文件的_config.yml 中，添加 12345search: path: search.xml field: post format: html limit: 10000 在 next 的_config.yml 中，将 local_search 下的 enable 改为 true 。再执行 123hexo cleanhexo ghexo d]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>next主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown一些写作规范]]></title>
    <url>%2F2018%2F01%2F24%2Fwindstorm%2F</url>
    <content type="text"><![CDATA[一级标题二级标题三级标题 链接示例12$ hexo new "My New Post"this is codes,use /```/ surrounded More info: Windstorm 代码块1在这里写代码 图片图片示例：图床示例： 列 one one-1 one-2 two two-1 two-2 three 表格/:/表示对齐方式 a b c 居中 左对齐 右对齐 ==== ====== ====== 分隔符最少三个—或email&#54;&#48;&#49;&#x38;&#x38;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#x6d; hexo建新文章hexo new “新闻中title” 字符背景1被``包围的内容有背景 如black 省略1&lt;!--more--&gt;后面会被折叠]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>something</tag>
      </tags>
  </entry>
</search>
